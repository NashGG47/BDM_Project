import geopandas as gpd
import pandas as pd
import folium
from shapely.geometry import Point
from influxdb_client import InfluxDBClient
from shapely import wkt

PARQUET_FILE = "storage/delta/raw/administrative_shapefiles/202505/20250512/part-00007-164285a9-9a85-49f1-9b6f-e1aa4a1ce683-c000.snappy.parquet"
INFLUX_URL = "http://localhost:8086"
INFLUX_TOKEN = "token1"
INFLUX_ORG = "upa"
INFLUX_BUCKET = "air_quality"



def query_air_quality():
    client = InfluxDBClient(url=INFLUX_URL, token=INFLUX_TOKEN, org=INFLUX_ORG)
    query = f'''
    from(bucket: "{INFLUX_BUCKET}")
        |> range(start: 0)
        |> filter(fn: (r) => r._measurement == "emissions")
        |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
        |> keep(columns: ["_time", "average_contaminant", "latitud", "longitud", "contaminant", "nom_estacio"])
    '''
    tables = client.query_api().query(query)
    results = []
    for table in tables:
        for record in table.records:
            results.append({
                "lat": record.values.get("latitud"),
                "lon": record.values.get("longitud"),
                "value": record.values.get("average_contaminant"),  # <-- FIX HERE
                "station": record.values.get("nom_estacio"),
                "contaminant": record.values.get("contaminant")
            })
    client.close()
    return pd.DataFrame(results)



def load_shapefile(parquet_path):
    df = pd.read_parquet(parquet_path)

    if "geometry" in df.columns:
        print("Geom found.")
        gdf = gpd.GeoDataFrame(df, geometry="geometry", crs="EPSG:4326")

    elif {"longitud", "latitud"}.issubset(df.columns):
        print("Creating geom.")
        df["geometry"] = df.apply(lambda row: Point(row["longitud"], row["latitud"]), axis=1)
        gdf = gpd.GeoDataFrame(df, geometry="geometry", crs="EPSG:4326")

    elif "geometry_wkt" in df.columns:
        print("Parsing WKT to geometry.")
        df["geometry"] = df["geometry_wkt"].apply(wkt.loads)
        gdf = gpd.GeoDataFrame(df, geometry="geometry", crs="EPSG:4326")

    else:
        print(f"Error: columns found = {df.columns.tolist()}")
        raise ValueError("The Parquet file must contain a 'geometry' column, a 'geometry_wkt' column, or both 'latitud' and 'longitud'.")

    return gdf


gdf_shape = load_shapefile(PARQUET_FILE)
df_points = query_air_quality()
m = folium.Map(location=[41.4, 2.16], zoom_start=8)
folium.GeoJson(gdf_shape.to_json(), name="Administrative Zones").add_to(m)


for _, row in df_points.iterrows():
    folium.CircleMarker(
        location=[row["lat"], row["lon"]],
        radius=6,
        popup=f'{row["station"]} ({row["contaminant"]}): {row["value"]:.1f} µg/m³',
        color="red",
        fill=True,
        fill_opacity=0.7
    ).add_to(m)


m.save("exploitation_zone/emissions_map/air_quality_map.html")
print("Map saved as exploitation_zone/emissions_map/air_quality_map.html")
