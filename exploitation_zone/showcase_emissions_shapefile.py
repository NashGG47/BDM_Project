import geopandas as gpd
import pandas as pd
import folium
from shapely.geometry import Point
from influxdb_client import InfluxDBClient
from shapely import wkt
import duckdb


PARQUET_FILE = "storage/delta/raw/administrative_shapefiles/202505/20250512/part-00007-164285a9-9a85-49f1-9b6f-e1aa4a1ce683-c000.snappy.parquet"
INFLUX_URL = "http://localhost:8086"
INFLUX_TOKEN = "token1"
INFLUX_ORG = "upa"
INFLUX_AQ_BUCKET = "air_quality"
INFLUX_INC_BUCKET = "gencat_incident_clusters"


def query_air_quality():
    client = InfluxDBClient(url=INFLUX_URL, token=INFLUX_TOKEN, org=INFLUX_ORG)
    query = f'''
    from(bucket: "{INFLUX_AQ_BUCKET}")
        |> range(start: 0)
        |> filter(fn: (r) => r._measurement == "emissions")
        |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
        |> keep(columns: ["_time", "average_contaminant", "latitud", "longitud", "contaminant", "nom_estacio"])
    '''
    tables = client.query_api().query(query)
    results = []
    for table in tables:
        for record in table.records:
            results.append({
                "lat": record.values.get("latitud"),
                "lon": record.values.get("longitud"),
                "value": record.values.get("average_contaminant"),
                "station": record.values.get("nom_estacio"),
                "contaminant": record.values.get("contaminant")
            })
    client.close()
    return pd.DataFrame(results)


def query_incident_clusters():
    client = InfluxDBClient(url=INFLUX_URL, token=INFLUX_TOKEN, org=INFLUX_ORG)
    query = f'''
    from(bucket: "{INFLUX_INC_BUCKET}")
      |> range(start: 0)
      |> filter(fn: (r) => r._measurement == "incident_clusters")
      |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
      |> keep(columns: ["_time", "road", "cause", "incident_count", "lat", "lon"])
    '''
    tables = client.query_api().query(query)
    results = []
    for table in tables:
        for record in table.records:
            results.append({
                "time": record.values.get("_time"),
                "road": record.values.get("road"),
                "cause": record.values.get("cause"),
                "incident_count": record.values.get("incident_count"),
                "lat": record.values.get("lat"),
                "lon": record.values.get("lon"),
            })
    client.close()
    return pd.DataFrame(results)


def load_shapefile_from_duckdb():

    con = duckdb.connect("bdm_project.duckdb")
    query = "SELECT *, geometry_wkt FROM trusted_admin_boundaries"
    df = con.execute(query).fetchdf()


    if "geometry_wkt" not in df.columns:
        raise ValueError("The table must contain a 'geometry_wkt' column.")

    df["geometry"] = df["geometry_wkt"].apply(wkt.loads)
    gdf = gpd.GeoDataFrame(df, geometry="geometry", crs="EPSG:4326")

    return gdf



gdf_shape = load_shapefile_from_duckdb()
df_aq = query_air_quality()
df_inc = query_incident_clusters()
gdf_aq = gpd.GeoDataFrame(
    df_aq,
    geometry=[Point(xy) for xy in zip(df_aq["lon"], df_aq["lat"])],
    crs="EPSG:4326"
)

gdf_incidents = gpd.GeoDataFrame(
    df_inc,
    geometry=[Point(xy) for xy in zip(df_inc["lon"], df_inc["lat"])],
    crs="EPSG:4326"
)

# Spatial join to match points with zones
gdf_aq_zones = gpd.sjoin(gdf_aq, gdf_shape[["NOM", "geometry"]], how="inner", predicate="within")
gdf_inc_zones = gpd.sjoin(gdf_incidents, gdf_shape[["NOM", "geometry"]], how="inner", predicate="within")


avg_aq_by_zone = gdf_aq_zones.groupby("NOM")["value"].mean().reset_index(name="avg_aq")
total_inc_by_zone = gdf_inc_zones.groupby("NOM")["incident_count"].sum().reset_index(name="total_incidents")


gdf_shape = gdf_shape.merge(avg_aq_by_zone, on="NOM", how="left")
gdf_shape = gdf_shape.merge(total_inc_by_zone, on="NOM", how="left")


gdf_shape["risk_index"] = (
    gdf_shape["avg_aq"].fillna(0) * 0.5 +
    gdf_shape["total_incidents"].fillna(0) * 0.5
)

m = folium.Map(location=[41.4, 2.16], zoom_start=8)
def fix_utf8(text):
    if isinstance(text, str):
        # Encode as Latin-1 bytes, then decode as UTF-8
        try:
            return text.encode('latin1').decode('utf-8')
        except UnicodeDecodeError:
            return text
    return text

gdf_shape['NOM'] = gdf_shape['NOM'].apply(fix_utf8)


m = folium.Map(location=[41.4, 2.16], zoom_start=11)


folium.GeoJson(
    gdf_shape.to_json(),
    name="Administrative Zones",
    tooltip=folium.GeoJsonTooltip(fields=["NOM"], aliases=["Name:"], localize=True)
).add_to(m)


folium.Choropleth(
    geo_data=gdf_shape,
    name="Average Air Quality",
    data=gdf_shape,
    columns=["NOM", "avg_aq"],
    key_on="feature.properties.NOM",
    fill_color="YlOrRd",
    fill_opacity=0.6,
    line_opacity=0.2,
    legend_name="Avg Air Quality (µg/m³)"
).add_to(m)


folium.Choropleth(
    geo_data=gdf_shape,
    name="Risk Index",
    data=gdf_shape,
    columns=["NOM", "risk_index"],
    key_on="feature.properties.NOM",
    fill_color="OrRd",
    fill_opacity=0.6,
    line_opacity=0.2,
    legend_name="Custom Risk Index"
).add_to(m)


for _, row in df_aq.iterrows():
    folium.CircleMarker(
        location=[row["lat"], row["lon"]],
        radius=6,
        popup=f'{row["station"]} ({row["contaminant"]}): {row["value"]:.1f} µg/m³',
        color="red",
        fill=True,
        fill_opacity=0.7,
    ).add_to(m)


for _, row in df_inc.iterrows():
    folium.CircleMarker(
        location=[row["lat"], row["lon"]],
        radius=7,
        popup=(f'Road: {row["road"]}<br>'
               f'Cause: {row["cause"]}<br>'
               f'Incidents: {int(row["incident_count"])}'),
        color="blue",
        fill=True,
        fill_opacity=0.6,
    ).add_to(m)
#like css
legend_html = '''
     <div style="
     position: fixed; 
     bottom: 50px; left: 50px; width: 180px; height: 100px; 
     background-color: white;
     border:2px solid grey; 
     z-index:9999; 
     font-size:14px;
     padding: 10px;
     box-shadow: 3px 3px 6px rgba(0,0,0,0.3);
     ">
     <b>Legend</b><br>
     <i style="background: red; border-radius: 50%; width: 12px; height: 12px; display: inline-block;"></i> Air Quality<br>
     <i style="background: blue; border-radius: 50%; width: 12px; height: 12px; display: inline-block;"></i> Incident Clusters<br>
     <i style="background: lightblue; border-radius: 50%; width: 12px; height: 12px; display: inline-block;"></i> Administrative Zones
     </div>
     '''
folium.LayerControl().add_to(m)
m.get_root().html.add_child(folium.Element(legend_html))

m.save("exploitation_zone/emissions_map/combined_map.html")
print("Map saved as exploitation_zone/emissions_map/combined_map.html")
