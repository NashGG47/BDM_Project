import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import json

# Set up plotting style
plt.style.use('seaborn-v0_8-darkgrid')
sns.set_palette("husl")

# Paths
EXPLOITATION_DIR = Path("storage/delta/exploitation/")
REPORTS_DIR = Path("reports/exploitation_zone/")
REPORTS_DIR.mkdir(parents=True, exist_ok=True)

print("Generating Exploitation Zone Visualizations...")

# ============================================
# 1. PASSENGER VOLUME VISUALIZATIONS
# ============================================
print("\n1. Creating Passenger Volume Charts...")

# Load data
peak_hours_df = pd.read_parquet(EXPLOITATION_DIR / "peak_hours_analysis.parquet")
station_metrics_df = pd.read_parquet(EXPLOITATION_DIR / "station_usage_metrics.parquet")

# 1.1 Peak Hours Bar Chart
fig, ax = plt.subplots(figsize=(12, 6))
peak_hours_df.head(10).plot(
    x='tramo_horario', 
    y=['total_boardings', 'total_alightings'], 
    kind='bar', 
    ax=ax,
    title='Top 10 Peak Hours - System-wide Passenger Flow'
)
ax.set_xlabel('Time Slot')
ax.set_ylabel('Number of Passengers')
ax.legend(['Boardings', 'Alightings'])
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig(REPORTS_DIR / 'peak_hours_analysis.png', dpi=300)
plt.close()

# 1.2 Station Usage Horizontal Bar Chart
fig, ax = plt.subplots(figsize=(10, 8))
top_stations = station_metrics_df.head(10).sort_values('total_passenger_flow')
ax.barh(top_stations['nombre_estacion'], top_stations['total_passenger_flow'])
ax.set_xlabel('Total Passenger Flow')
ax.set_title('Top 10 Busiest Stations by Total Passenger Flow')
plt.tight_layout()
plt.savefig(REPORTS_DIR / 'busiest_stations.png', dpi=300)
plt.close()

# ============================================
# 2. ENVIRONMENTAL INDICATORS VISUALIZATIONS
# ============================================
print("2. Creating Environmental KPI Charts...")

# Load data
co2_trends_df = pd.read_parquet(EXPLOITATION_DIR / "co2_emission_trends.parquet")
energy_kpi_df = pd.read_parquet(EXPLOITATION_DIR / "energy_efficiency_kpis.parquet")

# 2.1 CO2 Intensity Trend Line Chart
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 10))

# CO2 intensity over time
ax1.plot(co2_trends_df['year'], co2_trends_df['co2_intensity'], marker='o', linewidth=2, markersize=8)
ax1.set_xlabel('Year')
ax1.set_ylabel('CO₂ Intensity (g CO₂/UT)')
ax1.set_title('CO₂ Emission Intensity Trend (2013-2019)')
ax1.grid(True, alpha=0.3)

# Add trend annotation
start_val = co2_trends_df.iloc[0]['co2_intensity']
end_val = co2_trends_df.iloc[-1]['co2_intensity']
change_pct = ((end_val - start_val) / start_val) * 100
ax1.annotate(f'Total Change: {change_pct:.1f}%', 
             xy=(2019, end_val), 
             xytext=(2017, end_val + 2),
             arrowprops=dict(arrowstyle='->', color='red', alpha=0.7))

# Total energy consumption
ax2.plot(co2_trends_df['year'], co2_trends_df['total_energy_gwh'], marker='s', linewidth=2, markersize=8, color='green')
ax2.set_xlabel('Year')
ax2.set_ylabel('Total Energy (GWh)')
ax2.set_title('Total Energy Consumption Trend')
ax2.grid(True, alpha=0.3)

plt.tight_layout()
plt.savefig(REPORTS_DIR / 'co2_trends.png', dpi=300)
plt.close()

# 2.2 Energy Source Distribution Stacked Area Chart
fig, ax = plt.subplots(figsize=(10, 6))
ax.stackplot(energy_kpi_df['year'], 
             energy_kpi_df['electric_percentage'], 
             energy_kpi_df['diesel_percentage'],
             labels=['Electric', 'Diesel'],
             alpha=0.7)
ax.set_xlabel('Year')
ax.set_ylabel('Percentage of Total Energy')
ax.set_title('Energy Source Distribution Over Time')
ax.legend(loc='upper right')
ax.set_ylim(0, 100)
ax.grid(True, alpha=0.3)
plt.tight_layout()
plt.savefig(REPORTS_DIR / 'energy_distribution.png', dpi=300)
plt.close()

# ============================================
# 3. DISTRICT-LEVEL VISUALIZATION
# ============================================
print("3. Creating District Analysis Charts...")

# Load data
district_flow_df = pd.read_parquet(EXPLOITATION_DIR / "district_passenger_flow.parquet")

if len(district_flow_df) > 0:
    # District passenger flow pie chart
    fig, ax = plt.subplots(figsize=(10, 8))
    colors = sns.color_palette('husl', n_colors=len(district_flow_df))
    wedges, texts, autotexts = ax.pie(
        district_flow_df['total_passenger_flow'], 
        labels=district_flow_df['district_name'], 
        autopct='%1.1f%%',
        colors=colors,
        startangle=90
    )
    ax.set_title('Passenger Flow Distribution by District')
    plt.tight_layout()
    plt.savefig(REPORTS_DIR / 'district_passenger_distribution.png', dpi=300)
    plt.close()

# ============================================
# 4. INTEGRATED DASHBOARD
# ============================================
print("4. Creating Integrated KPI Dashboard...")

# Load KPI summary
with open(EXPLOITATION_DIR / "kpi_summary.json", "r") as f:
    kpi_summary = json.load(f)

# Create a dashboard-style figure
fig = plt.figure(figsize=(16, 10))
fig.suptitle('Barcelona Urban Mobility - KPI Dashboard', fontsize=20, fontweight='bold')

# Grid layout
gs = fig.add_gridspec(3, 3, hspace=0.3, wspace=0.3)

# 1. Peak Hour Distribution (top left)
ax1 = fig.add_subplot(gs[0, 0])
peak_data = peak_hours_df.head(5)
ax1.bar(range(len(peak_data)), peak_data['total_passengers'])
ax1.set_xticks(range(len(peak_data)))
ax1.set_xticklabels(peak_data['tramo_horario'], rotation=45, ha='right')
ax1.set_title('Top 5 Peak Hours')
ax1.set_ylabel('Total Passengers')

# 2. CO2 Intensity Trend (top middle)
ax2 = fig.add_subplot(gs[0, 1])
ax2.plot(co2_trends_df['year'], co2_trends_df['co2_intensity'], 'g-o', linewidth=2)
ax2.set_title('CO₂ Intensity Trend')
ax2.set_xlabel('Year')
ax2.set_ylabel('g CO₂/UT')

# 3. Key Metrics Box (top right)
ax3 = fig.add_subplot(gs[0, 2])
ax3.axis('off')
metrics_text = f"""
KEY METRICS

Daily Passengers: {kpi_summary['passenger_metrics']['total_daily_passengers']:,}
Busiest Station: {kpi_summary['passenger_metrics']['busiest_station']}
Peak Hour: {kpi_summary['passenger_metrics']['system_peak_hour']}

CO₂ Reduction (2013-2019): {kpi_summary['environmental_metrics']['co2_reduction_2013_2019']:.1f} g/UT
Electric Energy: {kpi_summary['environmental_metrics']['electric_percentage_2019']:.1f}%
"""
ax3.text(0.1, 0.5, metrics_text, transform=ax3.transAxes, 
         fontsize=12, verticalalignment='center',
         bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.5))

# 4. Station Usage (bottom left, spanning 2 columns)
ax4 = fig.add_subplot(gs[1:, 0:2])
top_5_stations = station_metrics_df.head(5)
x = range(len(top_5_stations))
width = 0.35
ax4.bar([i - width/2 for i in x], top_5_stations['total_boardings'], width, label='Boardings')
ax4.bar([i + width/2 for i in x], top_5_stations['total_alightings'], width, label='Alightings')
ax4.set_xticks(x)
ax4.set_xticklabels(top_5_stations['nombre_estacion'], rotation=45, ha='right')
ax4.set_title('Top 5 Stations - Passenger Flow')
ax4.set_ylabel('Number of Passengers')
ax4.legend()

# 5. Energy Mix Pie Chart (bottom right)
ax5 = fig.add_subplot(gs[1:, 2])
latest_energy = energy_kpi_df[energy_kpi_df['year'] == 2019].iloc[0]
sizes = [latest_energy['electric_percentage'], latest_energy['diesel_percentage']]
ax5.pie(sizes, labels=['Electric', 'Diesel'], autopct='%1.1f%%', 
        colors=['lightgreen', 'lightcoral'], startangle=90)
ax5.set_title('Energy Mix (2019)')

plt.tight_layout()
plt.savefig(REPORTS_DIR / 'kpi_dashboard.png', dpi=300, bbox_inches='tight')
plt.close()

print("\n" + "="*60)
print("Visualization Generation Complete!")
print(f"Reports saved to: {REPORTS_DIR}")
print("="*60)

# Generate a simple HTML report
html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <title>Barcelona Urban Mobility - Exploitation Zone Report</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        h1 {{ color: #333; }}
        h2 {{ color: #666; }}
        img {{ max-width: 100%; height: auto; margin: 20px 0; }}
        .metric {{ background: #f0f0f0; padding: 10px; margin: 10px 0; border-radius: 5px; }}
    </style>
</head>
<body>
    <h1>Barcelona Urban Mobility - Exploitation Zone Analysis</h1>
    
    <h2>1. Passenger Volume Analysis</h2>
    <img src="peak_hours_analysis.png" alt="Peak Hours Analysis">
    <img src="busiest_stations.png" alt="Busiest Stations">
    
    <h2>2. Environmental KPIs</h2>
    <img src="co2_trends.png" alt="CO2 Trends">
    <img src="energy_distribution.png" alt="Energy Distribution">
    
    <h2>3. District Analysis</h2>
    <img src="district_passenger_distribution.png" alt="District Distribution">
    
    <h2>4. Integrated Dashboard</h2>
    <img src="kpi_dashboard.png" alt="KPI Dashboard">
    
    <h2>Key Findings</h2>
    <div class="metric">
        <strong>Total Daily Passengers:</strong> {kpi_summary['passenger_metrics']['total_daily_passengers']:,}
    </div>
    <div class="metric">
        <strong>CO₂ Reduction (2013-2019):</strong> {kpi_summary['environmental_metrics']['co2_reduction_2013_2019']:.1f} g CO₂/UT
    </div>
    <div class="metric">
        <strong>Electric Energy Share (2019):</strong> {kpi_summary['environmental_metrics']['electric_percentage_2019']:.1f}%
    </div>
</body>
</html>
"""

with open(REPORTS_DIR / 'exploitation_report.html', 'w') as f:
    f.write(html_content)

print("HTML report generated: exploitation_report.html")