import pandas as pd
import joblib
import os
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from exploitation_zone.store_transit_semistructured import extract_and_prepare
from influxdb_client import InfluxDBClient, BucketsApi

client = InfluxDBClient(url="http://localhost:8086", token="token1", org="upa")
buckets_api = client.buckets_api()

bucket_name = "processed_incidents"
org = "upa"

if not any(b.name == bucket_name for b in buckets_api.find_buckets().buckets):
    buckets_api.create_bucket(bucket_name=bucket_name, org=org)

def train_model():
    output_dir = "../exploitation_zone/storage"
    os.makedirs(output_dir, exist_ok=True)

    # Load prepared data
    df = pd.read_csv("data/prepared_data.csv")
    X = df[["pk_start", "pk_end", "road", "direction"]]
    y = df["is_maintenance"]
    X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y)
    clf = RandomForestClassifier(n_estimators=100, random_state=42)
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    report = classification_report(y_test, y_pred, target_names=["Other", "Maintenance"])
    print("Classification Report:")
    print(report)

    report_path = os.path.join(output_dir, "classification_report.txt")
    with open(report_path, "w") as f:
        f.write(report)
    print(f"Report saved to '{report_path}'")
    model_path = os.path.join(output_dir, "traffic_incident_model.pkl")
    joblib.dump(clf, model_path)
    print(f"Model saved to '{model_path}'")

extract_and_prepare()
train_model()
