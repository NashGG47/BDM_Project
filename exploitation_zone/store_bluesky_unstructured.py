from minio import Minio
from pathlib import Path
import pandas as pd
import shutil
import matplotlib.pyplot as plt
import re

# Config MinIO
client = Minio("localhost:9000", access_key="admin", secret_key="admin123", secure=False)
bucket = "exploitation-zone"
base_path = "storage/social_media/bluesky/"

# Base paths
BASE_DIR = Path(__file__).resolve().parents[1]
trusted_parquet_dir = BASE_DIR / "trusted_zone" / "storage" / "processed" / "bluesky" / "posts_clean.parquet"
trusted_images_dir = BASE_DIR / "trusted_zone" / "storage" / "processed" / "bluesky" / "images"

# Desired output structure
exploit_base = BASE_DIR / "exploitation_zone" / "storage" / "bluesky"
transport_dir = exploit_base / "transport"
other_dir = exploit_base / "other"
transport_img_dir = transport_dir / "images"
other_img_dir = other_dir / "images"

# Keywords
KEYWORDS = [
    # Inglés
    "transport", "bus", "metro", "tram", "taxi", "subway", "traffic", "train", "station", "stop",
    "platform", "delay", "strike", "incident", "congestion", "commute", "ride", "transit",
    "public transport", "urban mobility", "passengers", "car", "bike", "e-bike", "cab",
    "ride sharing", "parking", "journey", "route", "bus stop", "walking", "lanes", "circle line",

    # Español
    "transporte", "autobús", "metro", "tranvía", "taxi", "tráfico", "tren", "estación", "parada",
    "plataforma", "retraso", "huelga", "incidente", "congestión", "movilidad urbana", "pasajeros",
    "coche", "bicicleta", "patinete", "carril bus", "compartido", "aparcamiento", "trayecto",
    "ruta", "zona universitaria", "avenida", "peatonal", "billete", "intercambiador", "tarifa integrada",

    # Catalán
    "transport públic", "autobús", "metro", "tramvia", "taxi", "trànsit", "tren", "estació", "parada",
    "plataforma", "retard", "vaga", "incident", "congestió", "mobilitat urbana", "passegers",
    "cotxe", "bicicleta", "patinet", "carril bus", "compartit", "aparcament", "trajecte",
    "ruta", "zona universitària", "avinguda", "peatonal", "bitllet", "intercanviador", "tarifa integrada",

    # Apps y servicios
    "app tmb", "mapa metro", "horario autobús", "horario metro", "validación", "transbordo",
    "hora punta", "línea L1", "línea L5", "L9 sud", "L10 nord", "targeta T-10", "targeta T-usual",
    "ap7", "ap-7", "a-7", "autopista", "camión", "trànsit", "sortida", "retenció", "accident", "carril"

    # Compañías y siglas locales
    "tmb", "renfe", "rodalies", "fgc", "bicing",

    # Localizaciones clave en Barcelona
    "barcelona", "bcn", "glòries", "sants", "diagonal", "verdaguer", "passeig de gràcia",
    "plaça catalunya", "plaça espanya", "arc de triomf", "hospital clínic",

    # Sharing / movilidad alternativa
    "carsharing", "ridesharing", "moto sharing", "e-scooter", "cooltra", "reby", "voi", "tier", "free now"
]

# Palabras que indican Barcelona
BARCELONA_WORDS = [
    "barcelona", "bcn", "glòries", "sants", "diagonal", "verdaguer",
    "passeig de gràcia", "plaça catalunya", "plaça espanya", "arc de triomf", "hospital clínic"
]

# Palabras para excluir ruido temático
EXCLUSION_TERMS = [
    "pan", "panadería", "clima", "tiempo", "soleado",
    "festival", "primavera sound", "concierto", "música",
    "presidente", "reunión", "política", "idioma", "lengua",
    "vivienda", "plan de vivienda", "protesta", "manifestación",
    "guerra", "religión", "papa", "argentina", "gaza", "ayuso",
    "catalán", "vasco", "co-oficial", "idiomas"
]

def clean_text(text):
    if not isinstance(text, str):
        return ""
    text = text.lower()
    text = re.sub(r"http\S+", "", text)
    text = re.sub(r"[^\w\s]", "", text)
    return text

def upload_to_minio(local_path, object_path):
    client.fput_object(bucket, object_path, str(local_path))
    print(f"Uploaded to MinIO: {object_path}")

def main():
    if not client.bucket_exists(bucket):
        client.make_bucket(bucket)

    parquet_files = list(trusted_parquet_dir.glob("*.parquet"))
    if not parquet_files:
        raise FileNotFoundError("No .parquet files found in trusted zone.")
    df = pd.read_parquet(parquet_files[0])
    df['clean_text'] = df['text'].apply(clean_text).fillna("")

    transport_pattern = r'\b(?:' + '|'.join(re.escape(k) for k in KEYWORDS) + r')\b'
    barcelona_pattern = r'\b(?:' + '|'.join(re.escape(k) for k in BARCELONA_WORDS) + r')\b'

    def is_transport_post(text):
        return (
            re.search(transport_pattern, text) is not None and
            re.search(barcelona_pattern, text) is not None and
            not any(term in text for term in EXCLUSION_TERMS)
        )

    df_transport = df[df['clean_text'].apply(is_transport_post)]
    df_other = df.drop(df_transport.index)

    print(f"🚇 Transport posts: {len(df_transport)}")
    print(f"📰 Other posts: {len(df_other)}")

    for folder in [transport_dir, other_dir, transport_img_dir, other_img_dir]:
        folder.mkdir(parents=True, exist_ok=True)

    df_transport.to_parquet(transport_dir / "posts_transport.parquet", index=False)
    df_other.to_parquet(other_dir / "posts_other.parquet", index=False)

    def copy_images(df_part, target_folder):
        for _, row in df_part.iterrows():
            if pd.notnull(row.get("image_path")):
                img_name = Path(str(row.image_path)).name
                src = trusted_images_dir / img_name
                dst = target_folder / img_name
                if src.exists():
                    shutil.copy(src, dst)

    copy_images(df_transport, transport_img_dir)
    copy_images(df_other, other_img_dir)

    upload_to_minio(transport_dir / "posts_transport.parquet", base_path + "transport/posts_transport.parquet")
    upload_to_minio(other_dir / "posts_other.parquet", base_path + "other/posts_other.parquet")

    for image in transport_img_dir.glob("*.jpg"):
        upload_to_minio(image, base_path + "transport/images/" + image.name)
    for image in other_img_dir.glob("*.jpg"):
        upload_to_minio(image, base_path + "other/images/" + image.name)

    labels = ['Transport-related', 'Other']
    values = [len(df_transport), len(df_other)]

    plt.figure(figsize=(6, 4))
    plt.bar(labels, values)
    plt.title("Post Categorization - Exploitation Zone")
    plt.ylabel("Number of Posts")
    plt.tight_layout()
    chart_path = exploit_base / "exploitation_summary.png"
    plt.savefig(chart_path)
    upload_to_minio(chart_path, base_path + "exploitation_summary.png")

    print("📊 Summary chart saved and uploaded.")

if __name__ == "__main__":
    main()
